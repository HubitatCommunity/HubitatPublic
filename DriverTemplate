/*
 * Import URL: https://raw.githubusercontent.com/HubitatCommunity/??/master/??-Driver.groovy"
 *
 *	Copyright 2019 Your Name
 *
 *	Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *	use this file except in compliance with the License. You may obtain a copy
 *	of the License at:
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *	License for the specific language governing permissions and limitations
 *	under the License.
 *
 *
 */
 
 
import groovy.transform.Field

metadata 
{
	definition(name: "JustA Driver", namespace: "yourame", author: "Your Name", importUrl: "https://raw.githubusercontent.com/HubitatCommunity/??/master/??.groovy")
	{
 		capability "Switch"
	}

      preferences 
      {
      

          //standard logging options
          input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
      }
}


/*
	updated
    
	Doesn't do much other than call initialize().
*/
def updated()
{
	initialize()
	unschedule()
      if (debugOutput) runIn(1800,logsOff) //disable debug logs after 30 min
	log.trace "Msg: updated ran"
}







/*

	generic driver stuff

*/


/*
	installed
    
	Doesn't do much other than call initialize().
*/
def installed()
{
	initialize()
	log.trace "Msg: installed ran"
}



/*
	initialize
    
	Doesn't do anything.
*/
def initialize()
{
	log.trace "Msg: initialize ran"
}


/*
	parse
    
	In a virtual world this should never be called.
*/
def parse(String description)
{
	log.trace "Msg: Description is $description"
}

/*
	on
    
	Turns the device on.
*/
def on()
{
	// The server will update on/off status
	log.trace "Msg: $description ON"
	
}


/*
	off
    
	Turns the device off.
*/
def off()
{
	// The server will update on/off status
	log.trace "Msg: $description OFF"
}



// Check Version   ***** with great thanks and acknowlegment to Cobra (CobraVmax) for his original code ****
def updateCheck()
{    
	state.Version = version()
	state.InternalName = "Your-Driver"
	
	def paramsUD = [uri: "https://hubitatcommunity.github.io/??/version.json"]
	
 	asynchttpGet("updateCheckHandler", paramsUD) 
}

def updateCheckHandler(resp, data) {
	if (resp.getStatus() == 200 || resp.getStatus() == 207) {
		respUD = parseJson(resp.data)
		//log.warn " Version Checking - Response Data: $respUD"   // Troubleshooting Debug Code - Uncommenting this line should show the JSON response from your webserver 
		state.Copyright = "${thisCopyright}"
		def newVerRaw = (respUD.versions.Driver.(state.InternalName))
		def newVer = (respUD.versions.Driver.(state.InternalName).replaceAll("[.vV]", ""))
		def currentVer = state.Version.replaceAll("[.vV]", "")                
		state.UpdateInfo = (respUD.versions.UpdateInfo.Driver.(state.InternalName))
		state.author = (respUD.author)
	
		if(newVer == "NLS")
		{
		      state.Status = "<b>** This driver is no longer supported by $state.author  **</b>"       
		      log.warn "** This driver is no longer supported by $state.author **"      
		}           
		else if(currentVer < newVer)
		{
		      state.Status = "<b>New Version Available (Version: $newVerRaw)</b>"
		      log.warn "** There is a newer version of this driver available  (Version: $newVerRaw) **"
		      log.warn "** $state.UpdateInfo **"
		} 
		else if(currentVer > newVer)
		{
		      state.Status = "<b>You are using a Test version of this Driver (Version: $newVerRaw)</b>"
		}
		else
		{ 
		    state.Status = "Current"
		    if (descTextEnable) log.info "You are using the current version of this driver"
		}
	
	      if(state.Status == "Current")
	      {
	           state.UpdateInfo = "N/A"
	           sendEvent(name: "DriverUpdate", value: state.UpdateInfo)
	           sendEvent(name: "DriverStatus", value: state.Status)
	      }
	      else 
	      {
	           sendEvent(name: "DriverUpdate", value: state.UpdateInfo)
	           sendEvent(name: "DriverStatus", value: state.Status)
	      }
      }
      else
      {
           log.error "Something went wrong: CHECK THE JSON FILE AND IT'S URI"
      }
}

def getThisCopyright(){"&copy; 2019 Your Name "}
